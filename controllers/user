// Import du package bcrypt
const bcrypt = require('bcrypt');
// Inclusion du model User
const User = require('../models/User');

exports.signup = (req, res, next) => {
    bcrypt.hash(req.body.password, 10)
        .then(hash => {
            const user = new User({
                email: req.body.email,
                password: hash
            });
            user.save()
                .then(() => res.status(201).json({message : 'Utilisateur crée'}))
                .catch(error => res.status(400).json({error}))
        })
        .catch(error => res.status(500).json({error}))
};

exports.login = (req, res, next) => {
    // Filtre sur l'email rentré par le client
    User.findOne({ email: req.body.email })
        .then(user => {
            // Cas où l'utilisateur n'existe pas dans la BDD
            if (user === null) {
                return res.status(401).json({ message: 'Paire login/mot de passe incorrecte'});
            }
            // Cas où l'utilisateur existe dans la BDD,
            else {
                // Comparaison du MDP entré par le client avec ce qui est stocké dans la BDD 
                bcrypt.compare(req.body.password, user.password)
                    .then(valid => {
                        // Cas où le MDP transmis n'est pas correct 
                        if (!valid) {
                            return res.status(401).json({ message: 'Paire login/mot de passe incorrecte' });
                        }
                        // Cas où le MDP transmis est correct : génération d'un Token
                        else {
                            res.status(200).json({
                                userId: user._id,
                                token: 'TOKEN'
                            })
                        };
                    })
                    // Erreur d'exécution de la requête de la BDD
                    .catch(error => res.status(500).json({error}))
            };
        })
        // Erreur d'exécution de la requête de la BDD
        .catch(error => res.status(500).json({error}));
};